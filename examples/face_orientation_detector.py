import face_recognition
import cv2
import numpy as np
import os
from pathlib import Path


class FaceOrientationDetector:
    def __init__(self):
        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º—ã –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–π
        self.orientation_aliases = {
            "front": "front",  # –ê–Ω—Ñ–∞—Å
            "left_profile": "l_prof",  # –ü—Ä–æ—Ñ–∏–ª—å –≤–ª–µ–≤–æ
            "right_profile": "r_prof",  # –ü—Ä–æ—Ñ–∏–ª—å –≤–ø—Ä–∞–≤–æ
            "semi_front": "semi"  # –ü–æ–ª—É–ø—Ä–æ—Ñ–∏–ª—å
        }

    def detect_orientation(self, image_path):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é –ª–∏—Ü–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = face_recognition.load_image_file(image_path)
            face_landmarks_list = face_recognition.face_landmarks(image)

            if not face_landmarks_list:
                return None

            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ
            landmarks = face_landmarks_list[0]

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –≥–ª–∞–∑
            left_eye = np.mean(landmarks['left_eye'], axis=0)
            right_eye = np.mean(landmarks['right_eye'], axis=0)

            # –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –º–µ–∂–¥—É –≥–ª–∞–∑–∞–º–∏
            delta_x = right_eye[0] - left_eye[0]
            delta_y = right_eye[1] - left_eye[1]
            angle = np.degrees(np.arctan2(delta_y, delta_x))

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
            if abs(angle) < 15:
                return "front"
            elif angle > 15:
                return "right_profile"
            elif angle < -15:
                return "left_profile"
            else:
                return "semi_front"

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {image_path}: {e}")
            return None

    def get_alias(self, orientation):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
        """
        return self.orientation_aliases.get(orientation, orientation)

    def has_alias_prefix(self, filename):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Å–µ–≤–¥–æ–Ω–∏–º –≤ –Ω–∞—á–∞–ª–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        """
        for alias in self.orientation_aliases.values():
            if filename.startswith(f"{alias}_"):
                return True
        return False

    def process_directory(self, directory_path):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        """
        directory = Path(directory_path)

        if not directory.exists():
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_extensions = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif'}

        processed_count = 0
        renamed_count = 0

        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_path}")

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for file_path in directory.iterdir():
            if file_path.is_file() and file_path.suffix.lower() in image_extensions:
                print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {file_path.name}")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                orientation = self.detect_orientation(str(file_path))

                if orientation is None:
                    print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é: {file_path.name}")
                    continue

                alias = self.get_alias(orientation)

                # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if self.has_alias_prefix(file_path.name):
                    print(f"‚úÖ –§–∞–π–ª —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å: {file_path.name}")
                    processed_count += 1
                    continue

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                new_filename = f"{alias}_{file_path.name}"
                new_file_path = file_path.parent / new_filename

                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
                try:
                    file_path.rename(new_file_path)
                    print(f"‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {file_path.name} ‚Üí {new_filename}")
                    renamed_count += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è {file_path.name}: {e}")

                processed_count += 1

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {processed_count}")
        print(f"   –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {renamed_count}")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    detector = FaceOrientationDetector()

    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    directory_path = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: ").strip()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    detector.process_directory(directory_path)